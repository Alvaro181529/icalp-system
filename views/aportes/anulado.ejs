<%- include('../partials/header', {title, user}) %>

  <div class="px-8 py-2">
       <div class="overflow-x-auto shadow-md sm:rounded-lg">
      <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600 ">
        <thead class="text-xs text-gray-200 uppercase bg-blue-950 ">
          <tr>
            <th class="px-4 py-3">Usuario</th>
            <th class="px-4 py-3">Matricula</th>
            <th class="px-4 py-3">Talonario</th>
            <th class="px-4 py-3">Recibo</th>
            <th class="px-4 py-3">Colegiado</th>
            <th class="px-4 py-3">Observacion</th>
            <th class="px-4 py-3">Motivo</th>
            <th class="px-4 py-3">Fecha</th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se llenarán las filas con los resultados -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="flex flex-col items-center justify-between py-4 space-y-4">
      <div>
        <span class="text-sm text-gray-700">
          Mostrando
          <span id="start-item" class="font-semibold text-gray-900">
            <span id="current-page">Página 1</span> de
          </span>
          <span id="item-page" class="font-semibold text-gray-900" aria-live="polite"> </span>

        </span>
      </div>
      <div class="inline-flex mt-2 xs:mt-0">
        <button id="prev-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800  rounded-s hover:bg-blue-900  disabled:opacity-50 disabled:cursor-not-allowed">
          Anterior
        </button>
        <button id="next-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800 border-0 border-s border-blue-700 rounded-e hover:bg-blue-900">
          Siguiente
        </button>
      </div>
    </div>
  </div>

  <script defer>
    document.addEventListener("DOMContentLoaded", () => {
      const $ = (el) => document.querySelector(el);
      const prevPageButton = $("#prev-page");
      const nextPageButton = $("#next-page");
      const currentPageSpan = $("#current-page");
      const itemPage = $("#item-page");
      const resultTableBody = $("#result-table tbody");

      let page = 1; // Página actual
      let totalPages = 0; // Total de páginas

      // Actualiza el estado de los botones de paginación y la tabla
      const updatePagination = () => {
        prevPageButton.disabled = page === 1;
        nextPageButton.disabled = page === totalPages;
        currentPageSpan.textContent = `Página ${page}`;
        itemPage.textContent = `Total de páginas: ${totalPages}`;
      };

      // Función para generar la fila de la tabla
      const createTableRow = (item) => {
        const fecha = new Date(item.Fecha);
        const fechaFormateada = fecha.toLocaleDateString("es-ES", {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        const horaFormateada = fecha.toLocaleTimeString("es-ES", {
          hour: '2-digit',
          minute: '2-digit',
          hour12: true
        });
        const row = document.createElement("tr");
        row.innerHTML = `
          <td class="px-6 py-3 text-wrap">${item.Usuario || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap">${(item.Matricula || "No disponible").toString().padStart(5, "0")}</td>
          <td class="px-6 py-3 text-wrap">${item.Talonario || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap">${item.Recibo || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap"><a href='/colegiado/${item.ColegiadoId}'>${item.Nombre || 'No disponible'}</a></td>
          <td class="px-6 py-3 text-wrap">${item.Observacion || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap">${item.Motivo || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap"><p>${fechaFormateada || "No disponible"}</p> <p>${horaFormateada || ""}</p></td>
        `;
        return row;
      };

      // Actualiza la tabla con los datos
      const updateTable = (data) => {
        resultTableBody.innerHTML = ""; // Limpiar tabla antes de llenarla
        if (data.length > 0) {
          data.forEach(item => {
            resultTableBody.appendChild(createTableRow(item));
          });
        } else {
          const row = document.createElement("tr");
          row.innerHTML = `<td class="px-6 py-3 text-wrap" colspan="8">No se encontraron resultados</td>`;
          resultTableBody.appendChild(row);
        }
      };

      // Función para obtener los datos desde el servidor y actualizar la tabla
      const fetchAndUpdateTable = async () => {
        const url = `/contribution/voiding?page=${page}&pageSize=10`;
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error("Error en la solicitud");
          }

          const data = await response.json();
          if (data.data && Array.isArray(data.data)) {
            totalPages = data.pages; // Actualizar el total de páginas
            updateTable(data.data);
            updatePagination();
          } else {
            console.error("La estructura de la respuesta no es válida");
          }
        } catch (error) {
          console.error("Error al realizar la solicitud:", error);
        }
      };

      // Evento para cambiar a la página anterior
      prevPageButton.addEventListener("click", () => {
        if (page > 1) {
          page--;
          fetchAndUpdateTable();
        }
      });

      // Evento para cambiar a la página siguiente
      nextPageButton.addEventListener("click", () => {
        if (page < totalPages) {
          page++;
          fetchAndUpdateTable();
        }
      });

      // Llamada inicial para cargar los datos
      fetchAndUpdateTable();
    });
  </script>

  <%- include('../partials/footer',{user}) %>