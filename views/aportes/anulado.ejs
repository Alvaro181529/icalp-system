<%- include('../partials/header') %>

  <h1><%= title %></h1>
  <h2>Reporte aporte</h2>

  <table id="result-table">
    <thead>
      <tr>
        <th>Usuario</th>
        <th>Matricula</th>
        <th>Talonario</th>
        <th>Recibo</th>
        <th>Colegiado</th>
        <th>Observacion</th>
        <th>Motivo</th>
        <th>Fecha</th>
      </tr>
    </thead>
    <tbody>
      <!-- Aquí se llenarán las filas con los resultados -->
    </tbody>
  </table>

  <div id="pagination">
    <button id="prev-page" disabled>Anterior</button>
    <span id="current-page">Página 1</span>
    <button id="next-page">Siguiente</button>
    <p id="item-page"></p>
  </div>

  <script defer>
    document.addEventListener("DOMContentLoaded", () => {
      const $ = (el) => document.querySelector(el);
      const prevPageButton = $("#prev-page");
      const nextPageButton = $("#next-page");
      const currentPageSpan = $("#current-page");
      const itemPage = $("#item-page");
      const resultTableBody = $("#result-table tbody");
      
      let page = 1; // Página actual
      let totalPages = 0; // Total de páginas

      // Actualiza el estado de los botones de paginación y la tabla
      const updatePagination = () => {
        prevPageButton.disabled = page === 1;
        nextPageButton.disabled = page === totalPages;
        currentPageSpan.textContent = `Página ${page}`;
        itemPage.textContent = `Total de páginas: ${totalPages}`;
      };

      // Función para generar la fila de la tabla
      const createTableRow = (item) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td>${item.Usuario || "No disponible"}</td>
          <td>${(item.Matricula || "No disponible").toString().padStart(5, "0")}</td>
          <td>${item.Talonario || "No disponible"}</td>
          <td>${item.Recibo || "No disponible"}</td>
          <td><a href='/colegiado/${item.ColegiadoId}'>${item.Nombre || 'No disponible'}</a></td>
          <td>${item.Observacion || "No disponible"}</td>
          <td>${item.Motivo || "No disponible"}</td>
          <td>${item.Fecha || "No disponible"}</td>
        `;
        return row;
      };

      // Actualiza la tabla con los datos
      const updateTable = (data) => {
        resultTableBody.innerHTML = ""; // Limpiar tabla antes de llenarla
        if (data.length > 0) {
          data.forEach(item => {
            resultTableBody.appendChild(createTableRow(item));
          });
        } else {
          const row = document.createElement("tr");
          row.innerHTML = `<td colspan="8">No se encontraron resultados</td>`;
          resultTableBody.appendChild(row);
        }
      };

      // Función para obtener los datos desde el servidor y actualizar la tabla
      const fetchAndUpdateTable = async () => {
        const url = `/contribution/voiding?page=${page}&pageSize=10`;
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error("Error en la solicitud");
          }

          const data = await response.json();
          if (data.data && Array.isArray(data.data)) {
            totalPages = data.pages; // Actualizar el total de páginas
            updateTable(data.data);
            updatePagination();
          } else {
            console.error("La estructura de la respuesta no es válida");
          }
        } catch (error) {
          console.error("Error al realizar la solicitud:", error);
        }
      };

      // Evento para cambiar a la página anterior
      prevPageButton.addEventListener("click", () => {
        if (page > 1) {
          page--;
          fetchAndUpdateTable();
        }
      });

      // Evento para cambiar a la página siguiente
      nextPageButton.addEventListener("click", () => {
        if (page < totalPages) {
          page++;
          fetchAndUpdateTable();
        }
      });

      // Llamada inicial para cargar los datos
      fetchAndUpdateTable();
    });
  </script>

<%- include('../partials/footer') %>
