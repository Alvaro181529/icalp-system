<%- include('../partials/header', {title, user}) %>
  <div class="px-8">
    <div class="container mx-auto px-4 sm:px-6 lg:px-8">
      <div class="flex flex-col lg:flex-row justify-between items-start gap-6 py-8">
        <!-- Formulario de búsqueda por texto -->
        <div class="w-full space-y-4">
          <form id="form-search" method="get" class="flex w-full max-w-md">
            <input id="search" type="text" name="search" placeholder="Buscar por Matricula o Nombre"
              class="flex-grow px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            <button id="search-button" type="submit"
              class="px-6 py-2 bg-blue-900 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out">
              Buscar
            </button>
          </form>

          <form id="form-cobrador" method="get" class="flex w-full max-w-md">
            <select name="cobradores" id="cobradores"
              class="flex-grow px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500 appearance-none">
            </select>
            <button id="search-button" type="submit"
              class="px-6 py-2 bg-blue-900 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out">
              Buscar
            </button>
          </form>
        </div>

        <!-- Formulario de búsqueda por fechas -->
        <form id="form-search-date" method="get" class="w-full lg:w-auto">
          <div class="flex flex-col sm:flex-row items-end gap-4">
            <div class="w-full sm:w-auto">
              <label for="search-date-inicio" class="block text-sm font-medium text-gray-700 mb-1">
                Fecha de inicio
              </label>
              <input id="search-date-inicio" type="date" name="inicio"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <div class="w-full sm:w-auto">
              <label for="search-date-fin" class="block text-sm font-medium text-gray-700 mb-1">
                Fecha de fin
              </label>
              <input id="search-date-fin" type="date" name="fin"
                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
            </div>
            <button id="search-button" type="submit"
              class="w-full sm:w-auto px-6 py-2 bg-blue-900 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-150 ease-in-out">
              Buscar
            </button>
          </div>
        </form>
      </div>
    </div>
    <div>
      <h1 class="py-2 text-gray-500 font-bold"> Total recaudado entre fechas:
        <span class="py-2 text-gray-500 font-semibold" id="TotalMonto"></span>
      </h1>
    </div>
    <div class="overflow-x-auto shadow-md sm:rounded-lg">
      <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600 ">
        <thead class="text-xs text-gray-200 uppercase bg-blue-950 ">
          <tr>
            <th class="px-4 py-3">Fecha aporte cobrador</th>
            <th class="px-4 py-3">Matricula</th>
            <th class="px-4 py-3">Cobrador</th>
            <th class="px-4 py-3">Nombre</th>
            <th class="px-4 py-3">Recibo</th>
            <th class="px-4 py-3">Talonario</th>
            <th class="px-4 py-3">Fecha Inicio</th>
            <th class="px-4 py-3">Fecha final</th>
            <th class="px-4 py-3">Monto</th>
            <th class="px-4 py-3">Observacion</th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se llenarán las filas con los resultados -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="flex flex-col items-center justify-between py-4 space-y-4">
      <div>
        <span class="text-sm text-gray-700">
          Mostrando
          <span id="start-item" class="font-semibold text-gray-900">
            <span id="current-page">Página 1</span> de
          </span>
          <span id="item-page" class="font-semibold text-gray-900" aria-live="polite"> </span>

        </span>
      </div>
      <div class="inline-flex mt-2 xs:mt-0">
        <button id="prev-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800  rounded-s hover:bg-blue-900  disabled:opacity-50 disabled:cursor-not-allowed">
          Anterior
        </button>
        <button id="next-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800 border-0 border-s border-blue-700 rounded-e hover:bg-blue-900 disabled:opacity-50 disabled:cursor-not-allowed   disabled:opacity-50 disabled:cursor-not-allowed">
          Siguiente
        </button>
      </div>
    </div>
  </div>

  <script defer>
   
    document.addEventListener("DOMContentLoaded", function () {

      const prevPageButton = $("#prev-page");
      const nextPageButton = $("#next-page");
      const currentPageSpan = $("#current-page");
      const itemPage = $("#item-page");
      const resultTableBody = $("#result-table tbody");
      const searchForm = $('#form-search');
      const searchInput = $('#search');
      const searchInicio = $('#search-date-inicio');
      const searchFin = $('#search-date-fin');
      const formDate = $('#form-search-date')

      let cobrador
      let page = 1; 
      let dateInicio
      let dateFin
      let searchValue = ""; 

      const fetchCobradores = async () => {
        try {
          const result = await fetch('/users/cobrador'); 
          const res = await result.json(); 

         
          const cobradoresSelect = $('#cobradores');

         
          cobradoresSelect.innerHTML = '';


          const todoOption = document.createElement('option');
          todoOption.value = ""; 
          todoOption.textContent = "Todo"; 
          cobradoresSelect.appendChild(todoOption); 
         
          res.forEach(cobrador => {
            const option = document.createElement('option');
            if (cobrador.IsApproved === 1) { 
              option.value = cobrador.Email; 
              option.textContent = cobrador.Email; 
              cobradoresSelect.appendChild(option); 
            }
          });


        } catch (error) {
          console.error("Error al obtener los cobradores:", error); 
        }
      };

     
      fetchCobradores();


     
      const updateTable = (data, totalPages, totalMonto) => {
        resultTableBody.innerHTML = "";
        console.log(totalMonto);
        $('#TotalMonto').textContent = totalMonto
        if (data.length > 0) {
          data.forEach((item) => {
            const row = document.createElement("tr");
            const fecha = new Date(item.FechaAporte);
            const fechaFormateada = fecha.toLocaleDateString("es-ES", {
              weekday: 'long',
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            });
            const horaFormateada = fecha.toLocaleTimeString("es-ES", {
              hour: '2-digit',
              minute: '2-digit',
              hour12: true
            });
           
            row.innerHTML = `
          <td class="px-6 py-3 text-wrap" ><p>
            ${fechaFormateada || "No disponible"}</p> <p>${horaFormateada || ""}
            </p></td>
          <td class="px-6 py-3 text-wrap" >${item.Matricula.toString().padStart(5, "0") || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" >${item.Cobrador || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" >${item.Nombres || "No disponible"} ${item.Apellidos || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" >${item.Recibo || 'No disponible'}</td>
          <td class="px-6 py-3 text-wrap" >${item.Talonario || 'No disponible'}</td>
          <td class="px-6 py-3 text-wrap" >${item.FechaInicial || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" >${item.FechaFinal || "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" >${item.Monto ? item.Monto.toLocaleString('es-BO', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) + " Bs" : "No disponible"}</td>
          <td class="px-6 py-3 text-wrap" > 
            <p><strong>${item.MesesPagados}</strong> Cuotas pagadas</p>
            <p>Faltante: <b style='color:crimson'> ${item.Faltante}</b></p>
            ${item.Observacion || "No disponible"}
          </td>
        `;
            resultTableBody.appendChild(row);
          });
        } else {
          const row = document.createElement("tr");
          row.innerHTML = `<td class="px-6 py-3 text-wrap" colspan="9">No se encontraron resultados</td>`;
          resultTableBody.appendChild(row);
        }

       
        prevPageButton.disabled = page === 1;
        nextPageButton.disabled = page === totalPages;
        currentPageSpan.textContent = `Página ${page}`;
        itemPage.textContent = totalPages;
      };

     
      const fetchAndUpdateTable = async () => {
        const url = `/contributionPorCobrador?search=${searchValue || ""}&page=${page}&inicio=${dateInicio || ""}&fin=${dateFin || ""}&pageSize=10&cobrador=${cobrador || ''}`;
        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error("Error en la solicitud");
          }

          const data = await response.json();
          if (Array.isArray(data.users)) {
            console.log(data);
            totalPages = data.pages;
            totalMonto = data.totalMonto;
            updateTable(data.users, totalPages, totalMonto);
          } else {
            console.error("La estructura de la respuesta no es válida");
          }
        } catch (error) {
          console.error("Error al realizar la solicitud:", error);
        }
      };

     
      fetchAndUpdateTable();

     
      searchForm.addEventListener("submit", function (event) {
        event.preventDefault();
        cobrador = $('#cobradores').value;
        console.log(cobrador);
        searchValue = searchInput.value.trim();
        page = 1;
        fetchAndUpdateTable();
      });
     
      $('#form-cobrador').addEventListener("submit", function (event) {
        event.preventDefault();
        cobrador = $('#cobradores').value;
        page = 1;
        fetchAndUpdateTable();
      });

      formDate.addEventListener("submit", function (event) {
        event.preventDefault();
        dateFin = searchFin.value.trim() || "";
        dateInicio = searchInicio.value.trim() || "";
        page = 1;
        fetchAndUpdateTable();
      });

     
      prevPageButton.addEventListener("click", function () {
        if (page > 1) {
          cobrador = $('#cobradores').value;
          searchValue = searchInput.value.trim();
          dateFin = searchFin.value.trim() || "";
          dateInicio = searchInicio.value.trim() || "";
          page--;
          fetchAndUpdateTable();
        }
      });

     
      nextPageButton.addEventListener("click", function () {
        if (page < totalPages) {
          cobrador = $('#cobradores').value;
          searchValue = searchInput.value.trim();
          dateFin = searchFin.value.trim() || "";
          dateInicio = searchInicio.value.trim() || "";
          page++;
          fetchAndUpdateTable();
        }
      });
    });
  </script>


  <%- include('../partials/footer',{user}) %>