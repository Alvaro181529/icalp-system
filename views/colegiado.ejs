<%- include('partials/header', { title, user }) %>

<form id="search-form">
  <input
    id="search"
    type="search"
    placeholder="Buscar por Matricula, Carnet, Nombre o apellido"
  />
  <button id="search-button" type="submit">Buscar</button>
</form>

<table id="result-table">
  <thead>
    <tr>
      <th>Matricula</th>
      <th>Nombre</th>
      <th>Carnet</th>
      <th>Ruc</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <!-- Aquí se llenarán las filas con los resultados -->
  </tbody>
</table>

<script defer>
  document.addEventListener("DOMContentLoaded", function () {
    const $ = (el) => document.querySelector(el);
    const search = $("#search");
    const searchForm = $("#search-form");
    const resultTableBody = $("#result-table tbody");

    // Función para actualizar la tabla con los resultados de la búsqueda
    const updateTable = (users) => {
      // Limpiar la tabla antes de mostrar nuevos resultados
      resultTableBody.innerHTML = "";

      if (users.length > 0) {
        // Recorrer los usuarios y agregar una fila a la tabla por cada uno
        users.forEach((colegiado) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${colegiado.Matricula.toString().padStart(5, "0")}</td>
            <td>${colegiado.Nombres} ${colegiado.Paterno} ${
            colegiado.Materno
          }</td>
            <td>${colegiado.NumeroCI || "No disponible"}</td>
            <td>${colegiado.NumeroRuc || "No disponible"}</td>
            <td><a href="/colegiado/${colegiado.ColegiadoId}">Ver más</a></td>
          `;
          resultTableBody.appendChild(row);
        });
      } else {
        // Si no hay resultados, mostrar un mensaje en la tabla
        const row = document.createElement("tr");
        row.innerHTML = `<td colspan="3">No se encontraron resultados</td>`;
        resultTableBody.appendChild(row);
      }
    };

    // Función para realizar la búsqueda y actualizar la tabla
    const fetchAndUpdateTable = async (searchValue) => {
      const url = `colegiados?search=${encodeURIComponent(searchValue)}`;

      try {
        // Hacer la solicitud fetch
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Error en la búsqueda");
        }

        const data = await response.json(); // Asumimos que la respuesta es un JSON

        // Verificamos si la estructura de la respuesta es válida
        if (data && data.result && Array.isArray(data.result.users)) {
          updateTable(data.result.users); // Actualizar la tabla con los usuarios encontrados
        } else {
          console.error("La estructura de la respuesta no es válida");
          alert("Hubo un problema con los resultados. Intenta nuevamente.");
        }
      } catch (error) {
        console.error("Error en la búsqueda:", error);
        alert("Hubo un problema al realizar la búsqueda. Intenta nuevamente.");
      }
    };

    // Ejecutar la búsqueda inmediatamente al cargar la página (con un valor vacío o por defecto)
    fetchAndUpdateTable("");

    // Evento de búsqueda cuando el formulario se envíe
    searchForm?.addEventListener("submit", async (e) => {
      e.preventDefault(); // Evitar el envío de formulario o recarga de la página

      const searchValue = search.value.trim(); // Obtener y recortar el valor de búsqueda

      if (!searchValue) {
        alert("Por favor, ingrese un término de búsqueda.");
        return;
      }

      // Ejecutar la búsqueda con el valor introducido por el usuario
      fetchAndUpdateTable(searchValue);
    });
  });
</script>

<%- include('partials/footer'); %>
