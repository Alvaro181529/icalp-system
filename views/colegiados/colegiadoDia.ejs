<%- include('../partials/header', { title, user }) %>
  <div class="px-8">
    <div class="flex items-center w-full py-2 ">
      <form id="search-form" method="get" class="w-full flex items-center">
        <input id="search" type="text" name="search" placeholder="Buscar por Matricula o Nombre"
          class="w-full px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
        <button id="search-button" type="submit"
          class="px-8 py-2 bg-blue-900 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
          Buscar
        </button>
      </form>
    </div>
       <div class="overflow-x-auto shadow-md sm:rounded-lg">
      <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600 ">
        <thead class="text-xs text-gray-200 uppercase bg-blue-950 ">
          <tr>
            <th class="px-4 py-3">Matricula</th>
            <th class="px-4 py-3">Nombre</th>
            <th class="px-4 py-3">Matricula Conalab</th>
            <th class="px-4 py-3">Direccion Oficina</th>
            <th class="px-4 py-3">Telefono Oficina</th>
            <th class="px-4 py-3">Correo</th>
            <th class="px-4 py-3">Utlima fecha de pago</th>
            <th class="px-4 py-3">Deuda</th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se llenarán las filas con los resultados -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="flex flex-col items-center justify-between py-4 space-y-4">
      <div>
        <span class="text-sm text-gray-700">
          Mostrando
          <span id="start-item" class="font-semibold text-gray-900">
            <span id="current-page">Página 1</span> de
          </span>
          <span id="item-page" class="font-semibold text-gray-900" aria-live="polite"> </span>

        </span>
      </div>
      <div class="inline-flex mt-2 xs:mt-0">
        <button id="prev-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800  rounded-s hover:bg-blue-900  disabled:opacity-50 disabled:cursor-not-allowed">
          Anterior
        </button>
        <button id="next-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800 border-0 border-s border-blue-700 rounded-e hover:bg-blue-900">
          Siguiente
        </button>
      </div>
    </div>
  </div>
  <script defer>
    document.addEventListener("DOMContentLoaded", function () {
      const $ = (el) => document.querySelector(el);
      const prevPageButton = $("#prev-page");
      const nextPageButton = $("#next-page");
      const currentPageSpan = $("#current-page");
      const itemPage = $("#item-page");
      const search = $("#search");
      const searchForm = $("#search-form");
      const resultTableBody = $("#result-table tbody");
      let page = 1;
      const updateTable = (users, totalPages) => {
        resultTableBody.innerHTML = "";
        if (users.length > 0) {
          users.forEach((colegiado) => {
            const row = document.createElement("tr");
            row.innerHTML = `
      <td class="px-6 py-3 text-wrap">${colegiado.Matricula.toString().padStart(5, "0")}</td>
      <td class="px-6 py-3 text-wrap">${colegiado.Nombres} ${colegiado.Paterno} ${colegiado.Materno}</td>
      <td class="px-6 py-3 text-wrap">${colegiado.MatriculaConalab || "No disponible"}</td>
      <td class="px-6 py-3 text-wrap">${colegiado.DireccionOficina || "No disponible"}</td>
      <td class="px-6 py-3 text-wrap">${colegiado.TelefonoOficina || "No disponible"}</td>
      <td class="px-6 py-3 text-wrap">
        ${colegiado.Correo ? `${colegiado.Correo.slice(0, 30)}${colegiado.Correo.length > 30 ? '...' : ''}` : "No disponible"}
      </td>
      <td class="py-3 text-wrap">
        ${colegiado.UltimaFechaPago || "No disponible"}
      </td>
      <td class="px-6 py-3 text-wrap">
        <p>${colegiado.MesesDeuda ? `${colegiado.MesesDeuda} Meses con deuda` : "Sin deuda"}</p>
        <a class="font-medium text-blue-600 dark:text-blue-500 hover:underline text-center" href="/colegiado/${colegiado.ColegiadoId}">Ver más</a>
      </td>
                `;
            resultTableBody.appendChild(row);
          });
        } else {
          const row = document.createElement("tr");
          row.innerHTML = `<td class="px-6 py-3 text-wrap" colspan="3">No se encontraron resultados</td>`;
          resultTableBody.appendChild(row);
        }
        // Actualizar el estado de los botones de paginación
        prevPageButton.disabled = page === 1;
        nextPageButton.disabled = page === totalPages;
        currentPageSpan.textContent = `página ${page}`;
        itemPage.textContent =  totalPages;
      };

      // Función para realizar la búsqueda y actualizar la tabla
      const fetchAndUpdateTable = async (searchValue) => {
        const url = `/collegiate/day?search=${encodeURIComponent(searchValue || "")}&page=${page}&pageSize=10`;

        try {
          const response = await fetch(url);
          if (!response.ok) {
            throw new Error("Error en la búsqueda");
          }

          const data = await response.json(); // Asumimos que la respuesta es un JSON
          // Verificamos si la estructura de la respuesta es válida
          if (data && data.users && Array.isArray(data.users)) {
            totalPages = data.pages; // Actualizar el total de páginas
            updateTable(data.users, totalPages); // Actualizar la tabla con los usuarios encontrados
          } else {
            console.error("La estructura de la respuesta no es válida");
            alert("Hubo un problema con los resultados. Intenta nuevamente.");
          }
        } catch (error) {
          console.error("Error en la búsqueda:", error);
          alert("Hubo un problema al realizar la búsqueda. Intenta nuevamente.");
        }
      };

      // Ejecutar la búsqueda inmediatamente al cargar la página (con un valor vacío o por defecto)
      fetchAndUpdateTable("");

      // Evento de búsqueda cuando el formulario se envíe
      searchForm?.addEventListener("submit", async (e) => {
        e.preventDefault(); // Evitar el envío de formulario o recarga de la página

        const searchValue = search.value.trim(); // Obtener y recortar el valor de búsqueda


        // Ejecutar la búsqueda con el valor introducido por el usuario
        fetchAndUpdateTable(searchValue);
      });

      // Evento para cambiar a la página anterior
      prevPageButton.addEventListener("click", function () {
        if (page > 1) {
          page--;
          fetchAndUpdateTable();
        }
      });

      // Evento para cambiar a la página siguiente
      nextPageButton.addEventListener("click", function () {
        if (page < totalPages) {
          page++;
          fetchAndUpdateTable();
        }
      });
    });
  </script>

  <%- include('../partials/footer',{user}) %>