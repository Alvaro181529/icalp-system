<%- include('../partials/header', { title, user }) %>
  <div class="px-8 py-2">
       <div class="overflow-x-auto shadow-md sm:rounded-lg">
      <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600 ">
        <thead class="text-xs text-gray-200 uppercase bg-blue-950 ">
          <tr>
            <th class="px-4 py-3">
              <p>
                Fecha Matriculacion
              </p>
              <select id="year" name="year"
                class="mt-1 p-2 border border-blue-300 rounded-lg bg-transparent focus:ring-2 focus:ring-blue-500">
              </select>
            </th>
            <th class="px-4 py-3">Matricula</th>
            <th class="px-4 py-3">Nombre</th>
            <th class="px-4 py-3">Oficina</th>
            <th class="px-4 py-3">Correo</th>
            <th class="px-4 py-3">Nacimiento</th>
            <th class="px-4 py-3">Numero CI</th>
            <th class="px-4 py-3">Domicilio</th>
            <th class="px-4 py-3">Observacion</th>
            <th class="px-4 py-3">Cargo Actual</th>
            <th class="px-4 py-3">Especialidad Primaria</th>
            <th class="px-4 py-3">Situacion</th>
            <th class="px-4 py-3">Celular</th>
            <th class="px-4 py-3">Nacionalidad</th>
            <th class="px-4 py-3">Meses que debe</th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se llenarán las filas con los resultados -->
        </tbody>
      </table>
    </div>
    <div id="pagination" class="flex flex-col items-center justify-between py-4 space-y-4">
      <div>
        <span class="text-sm text-gray-700">
          Mostrando
          <span id="start-item" class="font-semibold text-gray-900">
            <span id="current-page">Página 1</span> de
          </span>
          <span id="item-page" class="font-semibold text-gray-900" aria-live="polite"> </span>

        </span>
      </div>
      <div class="inline-flex mt-2 xs:mt-0">
        <button id="prev-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800  rounded-s hover:bg-blue-900  disabled:opacity-50 disabled:cursor-not-allowed">
          Anterior
        </button>
        <button id="next-page"
          class="flex items-center justify-center px-3 h-8 text-sm font-medium text-white bg-blue-800 border-0 border-s border-blue-700 rounded-e hover:bg-blue-900">
          Siguiente
        </button>
      </div>
    </div>
  </div>

  <script defer>
    const $ = (el) => document.querySelector(el);
    const prevPageButton = $("#prev-page");
    const nextPageButton = $("#next-page");
    const currentPageSpan = $("#current-page");
    const itemPage = $("#item-page");
    const selectYear = $("#year");
    const resultTableBody = $("#result-table tbody");

    let page = 1;
    let totalPages = 1; 
    let year = new Date().getFullYear(); 

    
    const currentYear = new Date().getFullYear();
    const startYear = 2000;  
    const endYear = currentYear;  

    
    for (let year = startYear; year <= endYear; year++) {
      const option = document.createElement("option");
      option.classList.add('text-black');
      option.value = year;
      option.textContent = year;
      selectYear.appendChild(option);
    }

    
    selectYear.value = currentYear;

    
    const createRow = (item) => {
      const row = document.createElement("tr");
      const fecha = new Date(item.FechaMatriculacionAlColegio);
      const [año, mes, día] = [new Date(item.FechaNacimiento).getFullYear(), new Date(item.FechaNacimiento).getMonth() + 1, new Date(item.FechaNacimiento).getDate()];
      const fechaNacimiento = `${día.toString().padStart(2, '0')}/${mes.toString().padStart(2, '0')}/${año}`;

      const fechaFormateada = fecha.toLocaleDateString("es-ES", {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
      const horaFormateada = fecha.toLocaleTimeString("es-ES", {
        hour: '2-digit',
        minute: '2-digit',
        hour12: true
      });
      row.innerHTML = `
      <td class="px-6 py-3 text-wrap"><p>${fechaFormateada || "No disponible"}</p> <p>${horaFormateada || ""}</p></td>
      <td class="px-6 py-3 text-wrap">${item.Matricula.toString().padStart(5, "0") || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Nombre || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.DireccionOficina || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Correo || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${fechaNacimiento || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.NumeroCI || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.DireccionDomicilio || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Observacion || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.CargoActual || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.EspecialidadPrimaria || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Situacion || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Celular || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap">${item.Nacionalidad || 'No disponible'}</td>
      <td class="px-6 py-3 text-wrap" style="color: ${item.MesesDeuda > 0 ? 'crimson' : 'inherit'}">${item.MesesDeuda ?? "Registrado"}</td>
    `;
      return row;
    };

    
    const updateTable = (data) => {
      resultTableBody.innerHTML = ''; 

      if (data.length > 0) {
        data.forEach(item => {
          resultTableBody.appendChild(createRow(item)); 
        });
      } else {
        const row = document.createElement("tr");
        row.innerHTML = `<td class="px-6 py-3 text-wrap" colspan="14">No se encontraron resultados</td>`;
        resultTableBody.appendChild(row);
      }

      
      prevPageButton.disabled = page === 1;
      nextPageButton.disabled = page === totalPages;
      currentPageSpan.textContent = `Página ${page}`;
      itemPage.textContent = totalPages;
    };

    
    const fetchData = async () => {
      const url = `/collegiate/years?year=${year}&page=${page}`; 
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Error al obtener los datos");
        }
        const res = await response.json();
        if (Array.isArray(res.users)) {
          totalPages = res.pages; 
          updateTable(res.users); 
        } else {
          console.error("La estructura de la respuesta no es válida");
        }
      } catch (error) {
        console.error("Hubo un problema con la solicitud fetch:", error);
      }
    };

    
    fetchData();

    
    selectYear.addEventListener("change", function () {
      year = selectYear.value;  
      page = 1; 
      fetchData();  
    });

    
    prevPageButton.addEventListener("click", function () {
      if (page > 1) {
        page--;
        fetchData();
      }
    });

    
    nextPageButton.addEventListener("click", function () {
      if (page < totalPages) {
        page++;
        fetchData();
      }
    });
  </script>

  <%- include('../partials/footer',{user}) %>