<%- include('../partials/header', {title, user}) %>
    <div class="px-8">
        <dialog id="dialog" class="bg-gray-800 bg-opacity-50 items-center justify-center">
            <div class="bg-white rounded-lg p-6 w-full sm:w-96">
                <h3 class="text-xl font-semibold text-center mb-4">Agregar nuevo usuario</h3>
                <form id="form-create" method="dialog">
                    <label for="user" class="block text-sm font-medium text-gray-700 mb-1">Usuario:</label>
                    <input id="user" type="text"  class="mt-1 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" name="username" required />
                    
                    <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email:</label>
                    <input id="email" type="email" class="mt-1 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" name="email" required />
                    
                    <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Contraseña:</label>
                    <input id="password" type="password" class="mt-1 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" name="password" required />
                    
                    <label for="confirm-password" class="block text-sm font-medium text-gray-700 mb-1">Confirmación de contraseña:</label>
                    <input id="confirm-password" type="password" class="mt-1 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" name="confirm-password" required />
                    <div class="flex justify-between space-x-4 pt-4">
                    <button type="button" id="close-registrar"  class="w-1/2 py-2 bg-red-500 text-white rounded-md hover:bg-red-400 focus:outline-none focus:ring-2 focus:ring-red-500">Cancelar</button>
                    <button type="submit"class="w-1/2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500">Registrar</button>
                    </div>
                    <span id="error-message"></span>
            </form>
        </div>
        </dialog>

        <div class="flex items-center w-full py-2 ">
            <form id="search-form" method="get" class="w-full flex items-center">
                <input id="search" type="text" name="search" placeholder="Buscar por Correo o Nombre"
                    class="w-full px-4 py-2 border border-gray-300 rounded-l-lg focus:outline-none focus:ring-2 focus:ring-blue-500" />
                <button id="search-button" type="submit"
                    class="px-8 py-2 bg-blue-900 text-white rounded-r-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    Buscar
                </button>
            </form>
        </div>

           <div class="overflow-x-auto shadow-md sm:rounded-lg">
            <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600 ">
                <thead class="text-xs text-gray-200 uppercase bg-blue-950 ">
                    <tr>
                        <th class="px-4 py-3">Correo</th>
                        <th class="px-4 py-3">Usuario</th>
                        <th class="px-4 py-3">¿Está bloqueado?</th>
                        <th class="px-4 py-3">Roles</th>
                        <th class="px-4 py-3 flex justify-center items-center">
                            <button id="agregar-usuario"
                                class="bg-blue-900 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <p class="mx-6 my-2 ">
                                    Agregar usuario
                                </p>
                            </button>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Aquí se llenarán las filas con los resultados -->
                </tbody>
            </table>
        </div>
        <dialog id="dialog-roles" class="bg-white rounded-lg p-6 w-full sm:w-96">
            <h3 class="text-xl font-semibold text-center mb-4">Roles de usuario</h3>
            <form id="form-roles" method="dialog">
                <div id="roles">
                    <!-- Aquí se llenarán los checkbox con los roles -->
                </div>
                <div class="flex justify-between space-x-4 pt-4">
                <button type="submit" class="w-1/2 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500">Guardar</button>
                <button type="button" id="close-roles"class="w-1/2 py-2 bg-red-500 text-white rounded-md hover:bg-red-400 focus:outline-none focus:ring-2 focus:ring-red-500">Cancelar</button>
                </div>
            </form>
        </dialog>
    </div>

    <script defer>
        document.addEventListener("DOMContentLoaded", () => {
            
            const search = $("#search");
            const searchForm = $("#search-form");
            const resultTableBody = $("#result-table tbody");
            const activarButton = '.activate-button';
            const actualizarButton = '.actualizar-button';
            const eliminarButton = '.delete-button';
            const rolesContainer = $("#roles");
            //dalog
            const dialogRoles = $('#dialog-roles');
            const closeRoles = $('#close-roles');
            const closeResgistrar = $('#close-registrar');
            // Modal de agregar usuario
            const dialog = $("#dialog");
            const agregarUsuario = $("#agregar-usuario");

            // Actualiza la tabla con los usuarios obtenidos
            const updateTable = (users) => {
                resultTableBody.innerHTML = ""; // Limpiar tabla
                if (users.length > 0) {
                    users.forEach((item) => {
                        const row = document.createElement("tr");
                        row.innerHTML = `
                        <td  class="px-6 py-2">${item.Email}</td>
                        <td  class="px-6 py-2">${item.User}</td>
                        <td  class="px-6 py-2">${item.IsLockedOut === 1 ?
                                `<button class="${activarButton.slice(1)}" data-id="${item.UserId}">Activar</button>`
                                : 'Activado'}</td>
                        <td  class="px-6 py-2">${item.Roles || 'Sin asignación'}</td>
                        <td class="px-6 py-2">
                        <button 
                            class="py-2 bg-blue-900 text-white w-full rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 ${actualizarButton.slice(1)}"
                            data-id="${item.UserId}" 
                            data-roles="${item.Roles}"
                            aria-label="Actualizar roles de ${item.UserId}">
                            Roles
                        </button>
                        
                        <button 
                            class="py-2 mt-2 bg-red-700 text-white w-full rounded hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 ${eliminarButton.slice(1)}"
                            data-id="${item.UserId}"
                            aria-label="Eliminar usuario ${item.UserId}">
                            Eliminar
                        </button>
                        </td>`;
                        resultTableBody.appendChild(row);
                    });
                } else {
                    resultTableBody.innerHTML = `<tr><td  class="px-6 py-2" colspan="5">No se encontraron resultados</td></tr>`;
                }
            };

            // Realiza la búsqueda de usuarios
            const fetchAndUpdateTable = async (searchValue) => {
                const url = `/users?search=${encodeURIComponent(searchValue)}`;
                try {
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data?.users && Array.isArray(data.users)) {
                        updateTable(data.users);
                    } else {
                        alert("Hubo un problema con los resultados. Intenta nuevamente.");
                    }
                } catch (error) {
                    console.error(error);
                    alert("Error al realizar la búsqueda.");
                }
            };

            // Obtener roles
            const fetchRoles = async () => {
                const url = `/rols`;
                try {
                    const response = await fetch(url);
                    const roles = await response.json();
                    if (roles.length > 0) {
                        return roles;
                    } else {
                        console.error("No se encontraron roles.");
                    }
                } catch (error) {
                    console.error(error);
                    alert("Error al cargar los roles.");
                }
            };
            // Función para actualizar el diálogo de roles con los roles disponibles
            const populateRolesDialog = (roles, userRoles) => {
                rolesContainer.innerHTML = ''; // Limpiar contenedor de roles
                roles.forEach((role) => {
                    const checkbox = document.createElement("input");
                    checkbox.type = "checkbox";
                    checkbox.name = "roles";
                    checkbox.value = role.RoleId;
                    checkbox.id = role.RoleId;

                    if (userRoles.map(role => role.trim()).includes(role.Name)) {
                        checkbox.checked = true;
                    }
                    const label = document.createElement("label");
                    label.htmlFor = role.RoleId;
                    label.textContent = role.Name;

                    rolesContainer.append(checkbox, label, document.createElement("br"));
                });
            };

            // Inicializar
            fetchRoles();
            fetchAndUpdateTable("");

            // Manejo del formulario de búsqueda
            searchForm.addEventListener("submit", (e) => {
                e.preventDefault();
                const searchValue = search.value.trim();
                if (!searchValue) return alert("Por favor, ingrese un término de búsqueda.");
                fetchAndUpdateTable(searchValue);
            });
            // Registro de usuario
            const formCreate = $("#form-create");
            const errorMessage = $("#error-message");

            formCreate.addEventListener("submit", async (e) => {
                e.preventDefault();
                const userData = {
                    user: $("#user").value,
                    email: $("#email").value,
                    password: $("#password").value,
                    confirmedPassword: $("#confirm-password").value,
                };
                try {
                    const response = await fetch("/signup", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(userData),
                    });
                    const data = await response.json();
                    if (response.ok) {
                        errorMessage.textContent = "Registrado correctamente";
                        errorMessage.style.color = "green";
                        dialog.close()
                        fetchRoles();
                        fetchAndUpdateTable("");
                    } else {
                        errorMessage.style.color = "red";
                        errorMessage.textContent = data.message || "Hubo un error en el registro.";
                    }
                } catch (error) {
                    errorMessage.style.color = "red";
                    errorMessage.textContent = "Error en la solicitud. Por favor, inténtalo nuevamente.";
                }
            });

            // Manejo de eventos para activar, eliminar y actualizar roles de usuario
            resultTableBody.addEventListener('click', async (e) => {
                const button = e.target;
                const userId = button.getAttribute('data-id');

                if (button.classList.contains('activate-button')) {
                    await handleUserActivation(userId, button);
                } else if (button.classList.contains('delete-button')) {
                    await handleUserDeletion(userId, button);
                } else if (button.classList.contains('actualizar-button')) {
                    await handleUserRolesUpdate(userId, button);
                }
            });

            // Activar usuario
            const handleUserActivation = async (userId, button) => {
                try {
                    const response = await fetch(`/users/activate/${userId}`, { method: 'PATCH' });
                    if (response.ok) {
                        button.textContent = 'Activado';
                        button.classList.remove('activate-button');
                    } else {
                        alert("Error al activar el usuario");
                    }
                } catch (error) {
                    console.error(error);
                    alert("Error al activar el usuario.");
                }
            };

            // Eliminar usuario
            const handleUserDeletion = async (userId, button) => {
                if (confirm("¿Estás seguro de que deseas eliminar este usuario?")) {
                    try {
                        const response = await fetch(`/users/${userId}`, { method: 'DELETE' });
                        if (response.ok) {
                            button.closest('tr').remove();
                        } else {
                            alert("Error al eliminar el usuario.");
                        }
                    } catch (error) {
                        console.error(error);
                        alert("Error al eliminar el usuario.");
                    }
                }
            };

            // Actualizar roles de usuario
            const handleUserRolesUpdate = async (userId, button) => {
                const userRoles = button.getAttribute('data-roles').split(',');

                const roles = await fetchRoles();

                populateRolesDialog(roles, userRoles);
                dialogRoles.showModal();

                // 4. Asignar el evento para guardar los cambios
                const formRoles = $("#form-roles");
                formRoles.onsubmit = async (e) => {
                    e.preventDefault();
                    const selectedRoles = Array.from(rolesContainer.querySelectorAll("input:checked")).map(checkbox => checkbox.value);
                    console.log(selectedRoles);
                    // 5. Enviar los roles seleccionados al backend para actualizarlos
                    try {
                        const response = await fetch(`/users/${userId}/rols`, {
                            method: 'PATCH',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ rols: selectedRoles }) // Enviamos los roles seleccionados
                        });

                        const data = await response.json();
                        console.log(data);
                        if (response.ok) {
                            alert("Roles actualizados exitosamente");
                            dialogRoles.close();
                            fetchAndUpdateTable(""); // Refrescar la tabla con los datos actualizados
                        } else {
                            alert("Error al actualizar los roles: " + (data.message || 'Intenta de nuevo.'));
                        }
                    } catch (error) {
                        console.error("Error al actualizar roles:", error);
                        alert("Hubo un error al actualizar los roles. Intenta de nuevo.");
                    }
                };
            };

            agregarUsuario.addEventListener('click', () => {
                dialog.showModal();
            });
            // Cerrar el modal
            closeRoles.addEventListener('click', () => {
                dialogRoles.close()
            })
            closeResgistrar.addEventListener('click', () => {
                dialog.close()
            })

        });
    </script>

    <%- include('../partials/footer',{user}) %>