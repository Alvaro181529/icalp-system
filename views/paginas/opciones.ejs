<%- include('../partials/header', {title, user}) %>
  <div class="px-8 py-4">
    <div class="overflow-x-auto shadow-md sm:rounded-lg">
      <table id="result-table" class="w-full text-sm text-left rtl:text-right text-gray-600">
        <thead class="text-xs text-gray-200 uppercase bg-blue-950">
          <tr>
            <th class="px-6 py-3">
              Menu
              <select name="selectMenuSearch" id="selectMenuSearch"
                class="mt-1 p-2 border border-blue-300 rounded-lg bg-transparent focus:ring-2 focus:ring-blue-500">
              </select>
            </th>
            <th class="px-6 py-3">Opciones</th>
            <th class="px-6 py-3">Orden</th>
            <th class="px-6 py-3 text-center">Contenido</th>
            <th class="px-6 py-3 text-center">
              <button id="openDialogButton"
                class="bg-blue-900 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-200">
                <p class="mx-6 my-2">Agregar</p>
              </button>
            </th>
          </tr>
        </thead>
        <tbody>
          <!-- Aquí se llenarán las filas con los resultados -->
        </tbody>
      </table>
    </div>
  </div>

  <!-- Dialog de actualización -->
  <dialog id="dialog-update" class="p-6 max-w-md mx-auto bg-white rounded-lg shadow-lg">
    <form id="form-update" action="" class="space-y-4">

      <input type="number" name="SortNumber" id="SortNumber" hidden
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-200" />
      <select name="selectMenu" id="selectMenu"
        class="mt-1 p-2 w-full border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"></select>
      <div>
        <label for="SortNumberId" class="block text-sm font-semibold text-gray-700">Orden</label>
        <input type="number" name="SortNumberId" id="SortNumberId"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-200" />
      </div>
      <div>
        <label for="MenuName" class="block text-sm font-semibold text-gray-700">Nombre de la página</label>
        <input type="text" name="MenuName" id="MenuName" required autocomplete="off"
          class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-200"
          required />
      </div>
      <div class="flex justify-between gap-4">
        <button id="cerrarDialog"
          class="w-full py-2 bg-red-500 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-200">
          Cerrar
        </button>
        <button hidden type="submit" id="buttonActualizar"
          class="w-full py-2 bg-blue-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-200">
          Actualizar
        </button>
        <button id="buttonAgregar"
          class="w-full py-2 bg-blue-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition duration-200">
          Guardar
        </button>
      </div>
    </form>
  </dialog>

  <script defer>
    
    const resultTableBody = $("#result-table tbody");
    const dialogUpdate = $("#dialog-update");
    const formUpdate = $("#form-update");
    const buttonDialog = $("#openDialogButton");
    const select = $("#selectMenu");
    const buttonAgregar = $("#buttonAgregar");
    const buttonActualizar = $("#buttonActualizar");
    const selectMenu = $('#selectMenuSearch')
    let search = selectMenu.value
    // Función para actualizar la tabla
    const updateTable = (data) => {
      resultTableBody.innerHTML = ""; // Limpiar el cuerpo de la tabla
      if (data.length > 0) {
        data.forEach((item) => {
          const row = document.createElement("tr");
          row.innerHTML = `
                    <td class="px-6 py-3 break-words">${item.MenuNameEnglish}</td>
                    <td class="px-6 py-3 break-words">${item.TitleEnglish}</td>
                    <td class="px-6 py-3 break-words">${item.SortNumber}</td>
                    <td class="py-3 px-6 text-wrap">
                      <a   onclick="window.location.href='/opciones/${item.PageId}'" class="text-blue-500 hover:underline cursor-pointer"
                                aria-label="${item.Pagina ? 'Ver Contenido' : 'Agregar Contenido'}"
                              >
                                ${item.Pagina ? 'Ver Contenido' : 'Agregar Contenido'}
                              </a>
                      </td>
                    <td class="px-6 py-3">
                      <div class="flex justify-center gap-1">
                        <button class="py-2 px-4 bg-red-600 text-white rounded hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 eliminar-button" 
                        data-id="${item.PageId}">Eliminar</button>
                        <button class="py-2 px-4 bg-blue-900 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600 actualizar-button" 
                        data-id="${item.PageId}"  data-sort="${item.SortNumber}"  data-menu-name="${item.TitleEnglish}">Actualizar</button>
                      </div>
                    </td>
                `;
          resultTableBody.appendChild(row);
        });
      } else {
        resultTableBody.innerHTML = `<tr><td colspan="3" class="px-6 py-3 text-center">No hay resultados</td></tr>`;
      }
    };

    // Función para manejar el clic en los botones de acción
    const handleButtonClick = async (e) => {
      const button = e.target;
      const PageId = button.getAttribute("data-id");
      const Sort = button.getAttribute("data-sort");

      if (button.classList.contains("actualizar-button")) {
        buttonAgregar.setAttribute('hidden', true);
        buttonActualizar.removeAttribute('hidden');

        const MenuName = button.getAttribute("data-menu-name");
        // Rellenar los campos del formulario en el dialog
        $("#SortNumber").value = PageId;
        $("#SortNumberId").value = Sort;
        $("#MenuName").value = MenuName;

        // Mostrar el dialog para actualizar
        dialogUpdate.showModal();

        // Manejar el envío del formulario de actualización
        formUpdate.onsubmit = async (e) => {
          e.preventDefault();
          console.log('Actualizar');

          const updatedMenuName = $("#MenuName").value;
          const updatedSortNumber = $("#SortNumber").value;
          const updatedSortNumberId = $("#SortNumberId").value;
          const MenuId = $('#selectMenu').value

          // Capitalizar la primera letra del nombre
          const capitalizeFirstLetter = (str) => {
            if (!str) return str;
            return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
          };

          const MenuName = capitalizeFirstLetter(updatedMenuName);
          console.log(MenuName)
          try {
            const response = await fetch(`/option/${PageId}`, {
              method: "PATCH",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ menu:MenuId, id: updatedSortNumber, SortNumber: updatedSortNumberId, updatedMenuName }),
            });
            const data = await response.json();
            if (response.ok) {
              alert(
                "Menú actualizado exitosamente. Actualice la página para ver los cambios."
              );
              dialogUpdate.close();
              fetchAndUpdateTable(selectMenu.value); // Actualizar la tabla
            } else {
              alert(
                "Error al actualizar el menú: " +
                (data.message || "Intenta de nuevo.")
              );
            }

          } catch (error) {
            console.error("Error al actualizar el menú:", error);
            alert("Hubo un error al actualizar el menú. Intenta de nuevo.");
          }
          buttonActualizar.setAttribute('hidden', 'true');
          buttonAgregar.removeAttribute('hidden');
        };
      } else if (button.classList.contains("eliminar-button")) {
        // Confirmar eliminación
        const confirmDelete = confirm(
          "¿Estás seguro de que quieres eliminar este menú?, al elimarlo eliminara mas el contenido"
        );
        if (confirmDelete) {
          try {
            const response = await fetch(`/option/${PageId}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
            });
            const data = await response.json();
            if (response.ok) {
              alert(
                "Menú eliminado exitosamente. Actualice la página para ver los cambios." + data.message
              );
              fetchAndUpdateTable(selectMenu.value); // Actualizar la tabla
            } else {
              alert(
                "Error al eliminar el menú: " +
                (data.message || "Intenta de nuevo.")
              );
            }
          } catch (error) {
            console.error("Error al eliminar el menú:", error);
            alert("Hubo un error al eliminar el menú. Intenta de nuevo.");
          }
        }
      }
    };

    // Función para obtener los datos y actualizar la tabla
    const fetchAndUpdateTable = async (search) => {
      const url = `/option?search=${search}&size=100`;
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Error al obtener los datos");
        }
        const data = await response.json();
        if (Array.isArray(data.option)) {
          updateTable(data.option);
        } else {
          alert("La respuesta no es válida.");
        }
      } catch (error) {
        console.error("Error en la búsqueda:", error);
        alert("Hubo un problema al cargar los datos. Intenta nuevamente.");
      }
    };
    // Función para obtener los datos y actualizar la tabla
    const fetchMenu = async () => {
      const url = `/menu`;
      try {
        const response = await fetch(url);
        if (!response.ok) {
          throw new Error("Error al obtener los datos");
        }
        const data = await response.json();
        if (Array.isArray(data)) {
          updateOption(data)
          if (Array.isArray(data)) {
            select.innerHTML = ""; // Limpiar el cuerpo de la tabla
            if (data.length > 0) {
              data.forEach((item) => {
                const option = document.createElement("option");
                option.classList.add("text-black");
                option.value = item.MenuId;
                option.textContent = item.MenuNameEnglish;
                select.appendChild(option);
              });
            } else {
              select.innerHTML = `<option>No hay opciones</option>`;
            }
          } else {
            const option = document.createElement("option");
            option.textContent = "No hay resultados";
            option.disabled = true; // Deshabilitar la opción "No hay resultados"
            selectMenu.append(option);
          }
        } else {
          alert("La respuesta no es válida.");
        }
      } catch (error) {
        console.error("Error en la búsqueda:", error);
        alert("Hubo un problema al cargar los datos. Intenta nuevamente.");
      }
    };
    buttonAgregar.addEventListener("click", async (e) => {
      e.preventDefault(); // Prevenir el comportamiento por defecto del formulario (enviar por POST)

      // Crear un objeto FormData con los datos del formulario
      const formData = new FormData(formUpdate);

      const MenuId = formData.get('selectMenu')
      const TitleEnglish = formData.get('MenuName')
      const SortNumber = formData.get('SortNumberId')

      // Crear la URL para la solicitud
      const url = "/option";

      try {
        // Enviar la solicitud a la API con los datos del formulario
        const response = await fetch(url, {
          method: "POST", // El método que estamos utilizando es POST
          headers: {
            "Content-Type": "application/json", // Especificamos que los datos se enviarán en formato JSON
          },
          body: JSON.stringify({
            MenuId,
            SortNumber,
            TitleEnglish
          }), // Convertimos el objeto a JSON
        });

        // Esperar la respuesta y convertirla en JSON
        const data = await response.json();

        // Verificar si la respuesta fue exitosa
        if (response.ok) {
          alert("Menú agregado exitosamente.");
          dialogUpdate.close(); // Cerrar el diálogo después de agregar
          fetchAndUpdateTable(selectMenu.value); // Actualizar la tabla
        } else {
          alert("Error al agregar el menú: " + (data.message || "Intenta de nuevo."));
        }
      } catch (error) {
        console.error("Error al agregar el menú:", error);
        alert("Hubo un error al agregar el menú. Intenta de nuevo.");
      }
    });
    // Función para actualizar las opciones del select
    const updateOption = (data) => {
      // Limpiar el select (equivalente a innerHTML = "")
      selectMenu.innerHTML = "";

      if (data.length > 0) {
        data.forEach((item) => {
          const option = document.createElement("option");
          option.classList.add("px-6", "py-3", "break-words", "text-black");
          option.textContent = item.MenuNameEnglish;  // Cambiar innerHTML por textContent por seguridad
          selectMenu.append(option);
        });
      } else {
        const option = document.createElement("option");
        option.textContent = "No hay resultados";
        option.disabled = true; // Deshabilitar la opción "No hay resultados"
        selectMenu.append(option);
      }
    };

    buttonDialog.addEventListener("click", (e) => {
      buttonActualizar.setAttribute('hidden', 'true');
      buttonAgregar.removeAttribute('hidden');
      $('#MenuName').value = ''
      $('#SortNumber').value = ''
      e.preventDefault();
      dialogUpdate.showModal();
    });
    cerrarDialog.addEventListener("click", (e) => {
      e.preventDefault();
      dialogUpdate.close();
    });
    selectMenu.addEventListener("change", async () => {
      const search = selectMenu.value;
      await fetchAndUpdateTable(search);
    });
    // Escuchar clics en los botones de actualizar y eliminar
    resultTableBody.addEventListener("click", handleButtonClick);
    fetchMenu();
    fetchAndUpdateTable(selectMenu.value);// Llamada inicial para cargar los datos
  </script>

  <%- include('../partials/footer') %>